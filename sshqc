#!/bin/bash

# print helpers
pl_error() {
  printf "\t[\e[31mError\e[0m] %s\n" "$1"
}

pl_success() {
  printf "\t[\e[32mSuccess\e[0m] %s\n" "$1"
}

pl_info() {
  printf "\t%s\n" "$1"
}

usage() {
  echo -e "Usage: <INPUT> | sshqc [OPTIsON]"
  echo
  echo -e "* where input is name===host===password; pairs"
  echo "See: _addWiki_"
}

echo -e "======> STARTING SSHQC"

# check that input is being piped in
usage

# read input (cat or echo)
read -r IN
# echo "$IN"

# set globals
KEY=
USER_PUB_KEY=

# check user is root
ROOT_UID=0
E_NOTROOT=87
if [ "$UID" -ne "$ROOT_UID" ]
then
  echo "Must be root to run."
  exit "$E_NOTROOT"
fi

# check that ssh-keygen is installed
if ! [ -x "$(command -v ssh-keygen)" ]; then pl_error "Cannot find required 'ssh-keygen'" >&2; exit 1
fi

# check that sshpass is installed
if ! [ -x "$(command -v sshpass)" ]; then pl_error "Cannot find required 'sshpass'" >&2; exit 1
fi

# handle args
handle_keys=false
new_config=false
while test $# != 0
do
    case "$1" in
    -k) handle_keys=true ;;
    -n) new_config=true ;;
    --) shift; break;;
    *)  usage ;;
    esac
    shift
done

save_key() {
  pl_info ": SAVING KEY"
  if [ -z "$1" ]
  then
    pl_error "Could not get key for: $2 (Empty key file/doesn't exist)"
  else
    file="$HOME/.ssh/$2.key"
    touch "$file"
    echo "$1" > "$file"
    pl_success "Key saved!"
  fi

}

get_key() {
  pl_info ": GETTING KEY"
  KEY=$(sshpass -p "$1" ssh "$2" 'cat ~/.ssh/id_rsa.pub')
  if [ -z "$KEY" ]
  then
    pl_error "$KEY"
    pl_error "Could not get key for: $2 (Empty key file/doesn't exist)"
  else
    pl_success "Key found!"
  fi
}

add_authorized_key () {
    host="$2"
    arg_array=(${host//\@/ } )
    user="${arg_array[0]}"
    hostname="${arg_array[1]}"
    pl_info ": ADDING KEY"
    echo
    # use sshpass to add local user's key to server
    sshpass -p "$1" ssh-copy-id -i ~/.ssh/id_rsa.pub "$2"
}

get_user_pub() {
  echo -e "======> \e[36mSTART\e[0m : local"
  pl_info ": GETTING $SUDO_USER's PUBLIC KEY"
  pub_dir="$HOME/.ssh/id_rsa.pub"
  pl_info "Searching in $pub_dir ..."
  USER_PUB_KEY=$(cat "$pub_dir")
  if [ -z "$USER_PUB_KEY" ]
  then
    pl_error "Could not get $SUDO_USER's public key"
  else
    pl_success "Public key found!"
  fi
}

create_config() {
  host="$2"
  arg_array=(${host//\@/ } )
  config="$HOME/.ssh/config"
  name=$1
  user="${arg_array[0]}"
  hostname="${arg_array[1]}"
  pl_info ": WRITING $SUDO_USER's CONFIG FILE"
  pl_info "config file: $config ..."
  {
    echo
    echo "# $name"
    echo "# Generated by ssh-quick-config"
    echo "Host $name"
    echo -e "\tUser $user"
    echo -e "\tHostName $hostname"
    echo -e "\tIdentityFile $HOME/.ssh/$1.key"
    echo -e "\tPort 22"
  } >> "$config"
  pl_success "$1 block added!"
}

# get pub key, ssh config
get_user_pub

# main loop
while [ "$IN" != "$entry" ] ;do
    entry=${IN%%;*}
    IN="${IN#$entry;}"
    # grab credentials
    credentials=(${entry//===/ })
    config_name=${credentials[0]}
    host=${credentials[1]}
    pw=${credentials[2]}
    # start cycle
    echo -e "======> \e[36mSTART\e[0m : $config_name"
    get_key "$pw" "$host" "$config_name"
    if [ -z "$KEY" ]
    then
      pl_info "Skipping ... $config_name ($host)"
    else
      save_key "$KEY" "$config_name"
      add_authorized_key "$pw" "$host"
      create_config "$config_name" "$host"
    fi
done


echo
echo -e "\e[31m@@@ REMINDER: REMOVE ANY FILES WITH PASSWORD INFORMATION AFTER USE @@@"
echo

exit 0
